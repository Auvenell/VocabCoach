rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Articles collection - read-only for authenticated users
    match /articles/{articleId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin can write articles
    }
    
    // User progress - users can only access their own progress
    match /user_progress/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Reading sessions - users can only access their own sessions
    match /reading_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Question sessions - users can only access their own sessions
    match /question_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Word progress - users can only access their own word progress
    match /word_progress/{wordId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // User analytics - users can only access their own analytics
    match /user_analytics/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    

    
    // Open-ended responses within question sessions
    match /question_sessions/{questionSessionId}/open_ended_responses/{responseId} {
      allow read, write: if isAuthenticated() && 
        get(/databases/$(database)/documents/question_sessions/$(questionSessionId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/question_sessions/$(questionSessionId)).data.userId == request.auth.uid;
    }
    
    // Multiple choice responses within question sessions
    match /question_sessions/{questionSessionId}/multiple_choice_responses/{responseId} {
      allow read, write: if isAuthenticated() && 
        get(/databases/$(database)/documents/question_sessions/$(questionSessionId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/question_sessions/$(questionSessionId)).data.userId == request.auth.uid;
    }
    
    // Direct open-ended responses within question sessions
    match /question_sessions/{questionSessionId}/open_ended_responses/{responseId} {
      allow read, write: if isAuthenticated() && 
        get(/databases/$(database)/documents/question_sessions/$(questionSessionId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/question_sessions/$(questionSessionId)).data.userId == request.auth.uid;
    }
    
    // Admin functions (optional - for future admin panel)
    match /admin/{document=**} {
      allow read, write: if false; // Disabled for now, can be enabled with admin role
    }
  }
} 